
// ==================================================================
// StampSetting.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akelon.StampModule.Client
{
  public class StampSetting :
    global::Sungero.CoreEntities.Client.DatabookEntry, global::Akelon.StampModule.IStampSetting
  {
    #region Fields and properties

    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("f934513f-69b5-42cc-8fda-e3774740a380");

    public override global::System.Guid TypeGuid
    {
      get { return global::Akelon.StampModule.Client.StampSetting.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Akelon.StampModule.IStampSetting, Sungero.Domain.Interfaces"; }
    }

      public override string DisplayValue
      {
        get { return this.Name; }
        set { this.Name = value; }
      }

      public override string DisplayPropertyName
      {
        get { return "Name"; }
      }


    public new global::Akelon.StampModule.IStampSettingState State
    {
      get
      {
        return (global::Akelon.StampModule.IStampSettingState)base.State;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Akelon.StampModule.Shared.StampSettingState(this);
    }

    public new global::Akelon.StampModule.IStampSettingInfo Info
    {
      get
      {
        return (global::Akelon.StampModule.IStampSettingInfo)base.Info;
      }
    }

    public new global::Akelon.StampModule.IStampSettingAccessRights AccessRights
    {
      get
      {
        return (global::Akelon.StampModule.IStampSettingAccessRights)base.AccessRights;
      }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Akelon.StampModule.Client.StampSettingAccessRights(this);
    }

        protected global::Sungero.Domain.Client.SimpleProperty<global::System.String> _Name;

        public virtual global::System.String Name
        {
          get { return this._Name.Value; }
          set { this._Name.Value = value; }
        }
        protected global::Sungero.Domain.Client.EnumSimpleProperty<global::Sungero.Core.Enumeration?> _StampKind;

        public virtual global::Sungero.Core.Enumeration? StampKind
        {
          get { return this._StampKind.Value; }
          set { this._StampKind.Value = value; }
        }
        protected global::Sungero.Domain.Client.EnumSimpleProperty<global::Sungero.Core.Enumeration?> _DocumentPosition;

        public virtual global::Sungero.Core.Enumeration? DocumentPosition
        {
          get { return this._DocumentPosition.Value; }
          set { this._DocumentPosition.Value = value; }
        }
        protected global::Sungero.Domain.Client.EnumSimpleProperty<global::Sungero.Core.Enumeration?> _PagePosition;

        public virtual global::Sungero.Core.Enumeration? PagePosition
        {
          get { return this._PagePosition.Value; }
          set { this._PagePosition.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.Int32?> _SizeHeight;

        public virtual global::System.Int32? SizeHeight
        {
          get { return this._SizeHeight.Value; }
          set { this._SizeHeight.Value = value; }
        }
        protected global::Sungero.Domain.Client.SimpleProperty<global::System.Int32?> _SizeWidth;

        public virtual global::System.Int32? SizeWidth
        {
          get { return this._SizeWidth.Value; }
          set { this._SizeWidth.Value = value; }
        }


        private static global::Sungero.Domain.Shared.EnumerationItems _StampKindItems = new global::Sungero.Domain.Shared.EnumerationItems(
          null,
          typeof(global::Akelon.StampModule.StampSetting.StampKind),
          typeof(global::Akelon.StampModule.Client.StampSetting),
          "StampKind");

        public static global::Sungero.Domain.Shared.EnumerationItems StampKindItems
        {
          get { return global::Akelon.StampModule.Client.StampSetting._StampKindItems; }
        }

        public virtual global::Sungero.Domain.Shared.EnumerationItems StampKindAllowedItems
        {
          get { return global::Akelon.StampModule.Client.StampSetting.StampKindItems; }
        }

        private static global::Sungero.Domain.Shared.EnumerationItems _DocumentPositionItems = new global::Sungero.Domain.Shared.EnumerationItems(
          null,
          typeof(global::Akelon.StampModule.StampSetting.DocumentPosition),
          typeof(global::Akelon.StampModule.Client.StampSetting),
          "DocumentPosition");

        public static global::Sungero.Domain.Shared.EnumerationItems DocumentPositionItems
        {
          get { return global::Akelon.StampModule.Client.StampSetting._DocumentPositionItems; }
        }

        public virtual global::Sungero.Domain.Shared.EnumerationItems DocumentPositionAllowedItems
        {
          get { return global::Akelon.StampModule.Client.StampSetting.DocumentPositionItems; }
        }

        private static global::Sungero.Domain.Shared.EnumerationItems _PagePositionItems = new global::Sungero.Domain.Shared.EnumerationItems(
          null,
          typeof(global::Akelon.StampModule.StampSetting.PagePosition),
          typeof(global::Akelon.StampModule.Client.StampSetting),
          "PagePosition");

        public static global::Sungero.Domain.Shared.EnumerationItems PagePositionItems
        {
          get { return global::Akelon.StampModule.Client.StampSetting._PagePositionItems; }
        }

        public virtual global::Sungero.Domain.Shared.EnumerationItems PagePositionAllowedItems
        {
          get { return global::Akelon.StampModule.Client.StampSetting.PagePositionItems; }
        }




              protected global::Sungero.Domain.Client.INavigationProperty<global::Sungero.Docflow.IDocumentType> _DocumentType;

              public virtual global::Sungero.Docflow.IDocumentType DocumentType
              {
              get
              {
                return this._DocumentType.Value as global::Sungero.Docflow.IDocumentType;
              }

              set
              {
                (this._DocumentType as global::Sungero.Domain.Client.IProperty).Value = value;
              }
            }









      protected global::Sungero.Domain.Client.ImageProperty _StampImage;

      [global::Sungero.Domain.Shared.DoNotSavePreviousValue]
      public virtual global::System.Byte[] StampImage
      {
        get { return this._StampImage.Value; }
        set { this._StampImage.Value = value; }
      }



    #endregion

    #region Methods

    protected override object CreateActionsHandlers()
    {
      return new global::Akelon.StampModule.Client.StampSettingActions(this);
    }

    protected override object CreateCollectionActionsHandlers()
    {
      return new global::Akelon.StampModule.Client.StampSettingCollectionActions();
    }

    protected override object CreateAnyChildEntityActionsHandlers()
    {
      return new global::Akelon.StampModule.Client.StampSettingAnyChildEntityActions();
    }

    protected override object CreateAnyChildEntityCollectionActionsHandlers()
    {
      return new global::Akelon.StampModule.Client.StampSettingAnyChildEntityCollectionActions();
    }


    protected override global::Sungero.Domain.Client.EntityFunctions CreateClientFunctions()
    {
      return new global::Akelon.StampModule.Client.StampSettingFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Akelon.StampModule.Shared.StampSettingFunctions(this);
    }
    protected override object CreateHandlers() {
      return new global::Akelon.StampModule.StampSettingClientHandlers(this);
    }
    protected override object CreateSharedHandlers() {
      return new global::Akelon.StampModule.StampSettingSharedHandlers(this);
    }

    #endregion

    #region Framework events

    protected void NameChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Name, this.Name, this);
     ((global::Akelon.StampModule.IStampSettingSharedHandlers)this.SharedHandlers).NameChanged(args);
    }

    protected void DocumentTypeChangedHandler()
    {
      var args = new global::Akelon.StampModule.Shared.StampSettingDocumentTypeChangedEventArgs(this.State.Properties.DocumentType, this.DocumentType, this);
     ((global::Akelon.StampModule.IStampSettingSharedHandlers)this.SharedHandlers).DocumentTypeChanged(args);
    }

    protected void StampKindChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.StampKind, this.StampKind, this);
     ((global::Akelon.StampModule.IStampSettingSharedHandlers)this.SharedHandlers).StampKindChanged(args);
    }

    protected void DocumentPositionChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.DocumentPosition, this.DocumentPosition, this);
     ((global::Akelon.StampModule.IStampSettingSharedHandlers)this.SharedHandlers).DocumentPositionChanged(args);
    }

    protected void PagePositionChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.PagePosition, this.PagePosition, this);
     ((global::Akelon.StampModule.IStampSettingSharedHandlers)this.SharedHandlers).PagePositionChanged(args);
    }

    protected void SizeHeightChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.IntegerPropertyChangedEventArgs(this.State.Properties.SizeHeight, this.SizeHeight, this);
     ((global::Akelon.StampModule.IStampSettingSharedHandlers)this.SharedHandlers).SizeHeightChanged(args);
    }

    protected void SizeWidthChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.IntegerPropertyChangedEventArgs(this.State.Properties.SizeWidth, this.SizeWidth, this);
     ((global::Akelon.StampModule.IStampSettingSharedHandlers)this.SharedHandlers).SizeWidthChanged(args);
    }

    protected void StampImageChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.ImagePropertyChangedEventArgs(this.State.Properties.StampImage, this.StampImage, this);
     ((global::Akelon.StampModule.IStampSettingSharedHandlers)this.SharedHandlers).StampImageChanged(args);
    }



  protected global::System.String NameValueInputHandler(global::System.String value)
  {
    var args = new global::Sungero.Presentation.StringValueInputEventArgs(this.Name, value, this, this.Info.Properties.Name);
    ((global::Akelon.StampModule.StampSettingClientHandlers)this.Handlers).NameValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Docflow.IDocumentType DocumentTypeValueInputHandler(global::Sungero.Docflow.IDocumentType value)
  {
    var args = new global::Akelon.StampModule.Client.StampSettingDocumentTypeValueInputEventArgs(this.DocumentType, value, this, this.Info.Properties.DocumentType);
    ((global::Akelon.StampModule.StampSettingClientHandlers)this.Handlers).DocumentTypeValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Core.Enumeration? StampKindValueInputHandler(global::Sungero.Core.Enumeration? value)
  {
    var args = new global::Sungero.Presentation.EnumerationValueInputEventArgs(this.StampKind, value, this, this.Info.Properties.StampKind);
    ((global::Akelon.StampModule.StampSettingClientHandlers)this.Handlers).StampKindValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Core.Enumeration? DocumentPositionValueInputHandler(global::Sungero.Core.Enumeration? value)
  {
    var args = new global::Sungero.Presentation.EnumerationValueInputEventArgs(this.DocumentPosition, value, this, this.Info.Properties.DocumentPosition);
    ((global::Akelon.StampModule.StampSettingClientHandlers)this.Handlers).DocumentPositionValueInput(args);
    return args.NewValue;
  }

  protected global::Sungero.Core.Enumeration? PagePositionValueInputHandler(global::Sungero.Core.Enumeration? value)
  {
    var args = new global::Sungero.Presentation.EnumerationValueInputEventArgs(this.PagePosition, value, this, this.Info.Properties.PagePosition);
    ((global::Akelon.StampModule.StampSettingClientHandlers)this.Handlers).PagePositionValueInput(args);
    return args.NewValue;
  }

  protected global::System.Int32? SizeHeightValueInputHandler(global::System.Int32? value)
  {
    var args = new global::Sungero.Presentation.IntegerValueInputEventArgs(this.SizeHeight, value, this, this.Info.Properties.SizeHeight);
    ((global::Akelon.StampModule.StampSettingClientHandlers)this.Handlers).SizeHeightValueInput(args);
    return args.NewValue;
  }

  protected global::System.Int32? SizeWidthValueInputHandler(global::System.Int32? value)
  {
    var args = new global::Sungero.Presentation.IntegerValueInputEventArgs(this.SizeWidth, value, this, this.Info.Properties.SizeWidth);
    ((global::Akelon.StampModule.StampSettingClientHandlers)this.Handlers).SizeWidthValueInput(args);
    return args.NewValue;
  }



  protected global::System.Collections.Generic.IEnumerable<global::Sungero.Core.Enumeration> StampKindFilteringHandler()
  {
    return ((global::Akelon.StampModule.StampSettingClientHandlers)this.Handlers).StampKindFiltering(this.StampKindAllowedItems);
  }

  protected global::System.Collections.Generic.IEnumerable<global::Sungero.Core.Enumeration> DocumentPositionFilteringHandler()
  {
    return ((global::Akelon.StampModule.StampSettingClientHandlers)this.Handlers).DocumentPositionFiltering(this.DocumentPositionAllowedItems);
  }

  protected global::System.Collections.Generic.IEnumerable<global::Sungero.Core.Enumeration> PagePositionFilteringHandler()
  {
    return ((global::Akelon.StampModule.StampSettingClientHandlers)this.Handlers).PagePositionFiltering(this.PagePositionAllowedItems);
  }





    #endregion

    #region Constructors



              protected virtual void InitDocumentTypeNavigationProperty()
              {
                this._DocumentType = new global::Sungero.Domain.Client.NavigationProperty<global::Sungero.Docflow.IDocumentType>("DocumentType", this);
                this._DocumentType.ValueChanged += (sender, e) => { this.DocumentTypeChangedHandler(); };
                this.AddProperty(this._DocumentType as global::Sungero.Domain.Client.IProperty);
              }




    public StampSetting()
    {
            this._Name = new global::Sungero.Domain.Client.SimpleProperty<global::System.String>("Name", this);
            this._Name.ValueChanged += (sender, e) => { this.NameChangedHandler(); };
            this.AddProperty(this._Name);

            this._StampKind = new global::Sungero.Domain.Client.EnumSimpleProperty<global::Sungero.Core.Enumeration?>("StampKind", this);
            this._StampKind.ValueChanged += (sender, e) => { this.StampKindChangedHandler(); };
            this.AddProperty(this._StampKind);

            this._DocumentPosition = new global::Sungero.Domain.Client.EnumSimpleProperty<global::Sungero.Core.Enumeration?>("DocumentPosition", this);
            this._DocumentPosition.ValueChanged += (sender, e) => { this.DocumentPositionChangedHandler(); };
            this.AddProperty(this._DocumentPosition);

            this._PagePosition = new global::Sungero.Domain.Client.EnumSimpleProperty<global::Sungero.Core.Enumeration?>("PagePosition", this);
            this._PagePosition.ValueChanged += (sender, e) => { this.PagePositionChangedHandler(); };
            this.AddProperty(this._PagePosition);

            this._SizeHeight = new global::Sungero.Domain.Client.SimpleProperty<global::System.Int32?>("SizeHeight", this);
            this._SizeHeight.ValueChanged += (sender, e) => { this.SizeHeightChangedHandler(); };
            this.AddProperty(this._SizeHeight);

            this._SizeWidth = new global::Sungero.Domain.Client.SimpleProperty<global::System.Int32?>("SizeWidth", this);
            this._SizeWidth.ValueChanged += (sender, e) => { this.SizeWidthChangedHandler(); };
            this.AddProperty(this._SizeWidth);

            this.InitDocumentTypeNavigationProperty();





            this._StampImage = new global::Sungero.Domain.Client.ImageProperty("StampImage", this);
            this._StampImage.ValueChanged += (sender, e) => { this.StampImageChangedHandler(); };
            this.AddProperty(this._StampImage);




    }

    #endregion

  }
}

// ==================================================================
// StampSettingPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akelon.StampModule.Client
{
  public class StampSettingPresenter<T> :
    global::Sungero.Domain.Client.EntityPresenter<T>
    where T : class, global::Akelon.StampModule.IStampSetting
  {
    #region Fields and properties

          private global::System.Windows.Input.ICommand _LoadStampPictureCommand;

          public global::System.Windows.Input.ICommand LoadStampPictureCommand
          {
            get
            {
              if (this._LoadStampPictureCommand == null)
                  this._LoadStampPictureCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("LoadStampPicture", this, this.LoadStampPicture, this.CanLoadStampPicture) { IsEmptyParameterAllowed = true };
              return this._LoadStampPictureCommand;
            }
          }
          private global::System.Windows.Input.ICommand _DeleteStampPictureCommand;

          public global::System.Windows.Input.ICommand DeleteStampPictureCommand
          {
            get
            {
              if (this._DeleteStampPictureCommand == null)
                  this._DeleteStampPictureCommand = new global::Sungero.Domain.Client.SingleEntityCommand<T>("DeleteStampPicture", this, this.DeleteStampPicture, this.CanDeleteStampPicture) { IsEmptyParameterAllowed = true };
              return this._DeleteStampPictureCommand;
            }
          }




    #endregion

    #region Methods

              private bool CanLoadStampPicture(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Akelon.StampModule.Client.StampSettingActions)(entity as Akelon.StampModule.Client.StampSetting).ActionsHandlers).CanLoadStampPicture(args);
              }

              private void LoadStampPicture(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.LoadStampPicture);
                ((Akelon.StampModule.Client.StampSettingActions)(entity as Akelon.StampModule.Client.StampSetting).ActionsHandlers).LoadStampPicture(args);
              }
              private bool CanDeleteStampPicture(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfCanExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this);
                return ((Akelon.StampModule.Client.StampSettingActions)(entity as Akelon.StampModule.Client.StampSetting).ActionsHandlers).CanDeleteStampPicture(args);
              }

              private void DeleteStampPicture(T entity)
              {
                var args = new global::Sungero.Domain.Client.WpfExecuteActionArgs(global::Sungero.Domain.Shared.FormType.Card, entity, this, entity.Info.Actions.DeleteStampPicture);
                ((Akelon.StampModule.Client.StampSettingActions)(entity as Akelon.StampModule.Client.StampSetting).ActionsHandlers).DeleteStampPicture(args);
              }


    #endregion

    #region Framework events

    protected override void EntityPropertyChangedEventHandler(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
    {
      base.EntityPropertyChangedEventHandler(sender, e);
    }

    #endregion

              protected global::Sungero.Domain.Client.IEntityCollectionPresenter _DocumentTypeCollectionPresenter;
              public global::Sungero.Domain.Client.IEntityCollectionPresenter DocumentTypeCollectionPresenter
              {
          get { return this._DocumentTypeCollectionPresenter; }
        }



    #region Constructors

    private void Init()
    {
                  this._DocumentTypeCollectionPresenter = this.CreateCollectionPresenterForNavigationProperty<global::Sungero.Docflow.IDocumentType>(global::System.Guid.Parse("3f2c1564-9390-4706-aa50-0f14d935f5d6"));
              this._DocumentTypeCollectionPresenter
              .Query = global::Sungero.Domain.Client.Session.GetValuesForNavigationPropertyWithoutSourceEntity<global::Sungero.Docflow.IDocumentType>(() => this.Entity.Id, typeof(T), "DocumentType");


    }

    public StampSettingPresenter()
    {
      this.Init();
    }

    #endregion
  }
}

// ==================================================================
// StampSettingCollectionPresenter.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akelon.StampModule.Client
{
  public class StampSettingCollectionPresenter<T> : 
    global::Sungero.Domain.Client.EntityCollectionPresenter<T>
    where T: class, global::Akelon.StampModule.IStampSetting
  {
    #region Actions



    #endregion

    #region Methods


    #endregion

    public StampSettingCollectionPresenter(global::System.Linq.IQueryable<T> query, OnLookup onLookup)
      : base(query, onLookup)
    {
    }

    public StampSettingCollectionPresenter(global::System.Linq.IQueryable<T> query)
      : this(query, null) { }

    public StampSettingCollectionPresenter(OnLookup onLookup)
      : this(null, onLookup) { }

    public StampSettingCollectionPresenter()
      : this(null, null) { }
  }
}

// ==================================================================
// StampSettingRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akelon.StampModule.Client
{ 
  public class StampSettingRepositoryImplementer<T> : 
      global::Sungero.Domain.Client.RepositoryImplementer<T>,
      global::Akelon.StampModule.IStampSettingRepositoryImplementer<T>
      where T : global::Akelon.StampModule.IStampSetting
    {
       public new global::Akelon.StampModule.IStampSettingAccessRights AccessRights
       {
          get { return (global::Akelon.StampModule.IStampSettingAccessRights)base.AccessRights; }
       }

       public new global::Akelon.StampModule.IStampSettingInfo Info
       {
          get { return (global::Akelon.StampModule.IStampSettingInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Akelon.StampModule.Client.StampSettingTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// StampSettingAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akelon.StampModule.Client
{
  public class StampSettingAccessRights : 
    Sungero.CoreEntities.Client.DatabookEntryAccessRights, Akelon.StampModule.IStampSettingAccessRights
  {

    public StampSettingAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class StampSettingTypeAccessRights : 
    Sungero.CoreEntities.Client.DatabookEntryTypeAccessRights, Akelon.StampModule.IStampSettingAccessRights
  {

    public StampSettingTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}
