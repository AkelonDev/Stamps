
// ==================================================================
// Module.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akelon.StampModule.Server
{
  public partial class StampModuleModule : global::Sungero.Domain.Shared.ModuleBase
  {
    public override global::System.Guid Id
    {
      get { return global::System.Guid.Parse("afa06e1e-0cb3-4141-a383-ee483bb5bef6"); }
    }

    public override string Name
    {
      get { return "Akelon.StampModule"; }
    }

    public override void RegisterTypes()
    {
      global::Sungero.Domain.Shared.ModuleManager.Instance.Container.RegisterType<global::Akelon.StampModule.Server.IModuleServerInitializationFunctions, global::Akelon.StampModule.Server.ModuleServerInitializationFunctions>();
      global::Sungero.Domain.Shared.EntityInfoRegister.RegisterEntityInfo(new global::System.Guid("f934513f-69b5-42cc-8fda-e3774740a380"), new Akelon.StampModule.Shared.StampSettingInfo(typeof(global::Akelon.StampModule.IStampSetting)));
      global::Sungero.Domain.Shared.ModuleManager.Instance.Container.RegisterType<global::Akelon.StampModule.Server.IStampSettingServerPublicFunctions, global::Akelon.StampModule.Server.StampSettingServerPublicFunctions>();
      global::Sungero.Domain.Shared.ModuleManager.Instance.Container.RegisterType<global::Akelon.StampModule.Shared.IStampSettingSharedPublicFunctions, global::Akelon.StampModule.Shared.StampSettingSharedPublicFunctions>();


      global::Sungero.Domain.Shared.ModuleManager.Instance.Container.RegisterType<global::Akelon.StampModule.IStampSettingFilterState, global::Akelon.StampModule.Shared.StampSetting.StampSettingFilterState>();



      global::Sungero.Domain.Shared.ModuleManager.Instance.Container.RegisterType<global::Akelon.StampModule.Server.IModuleServerPublicFunctions, global::Akelon.StampModule.Server.ModuleServerPublicFunctions>();
      global::Sungero.Domain.Shared.ModuleManager.Instance.Container.RegisterType<global::Akelon.StampModule.Shared.IModuleSharedPublicFunctions, global::Akelon.StampModule.Shared.ModuleSharedPublicFunctions>();
    }
  }
}

// ==================================================================
// ModuleHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akelon.StampModule.Server
{
}

// ==================================================================
// ModuleFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akelon.StampModule.Functions
{
  internal static partial class Module
  {
    /// <redirect project="Akelon.StampModule.Server" type="Akelon.StampModule.Server.ModuleFunctions" />
    [global::Sungero.Core.RemoteAttribute(IsPure = true)]
    internal static global::System.String CreateDocumentStamp(global::Sungero.Docflow.IOfficialDocument document)
    {
      var __moduleId = new global::System.Guid("afa06e1e-0cb3-4141-a383-ee483bb5bef6");
      var __finalModuleMetadatda = global::Sungero.Metadata.MetadataExtension.GetFinal(global::Sungero.Metadata.Services.MetadataSearcher.FindModuleMetadata(__moduleId) ?? global::Sungero.Metadata.Services.MetadataSearcher.FindLayerModuleMetadata(__moduleId));
      var __funcNamespace = "Server" == "ClientBase" ? __finalModuleMetadatda.ClientNamespace : __finalModuleMetadatda.ServerNamespace;
      var __typeName = __funcNamespace + ".ModuleFunctions, Akelon.StampModule.Server";
      var __type = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve(__typeName);
      if (__type != null)
      {
        var __instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(__type);
        var __methodInfo = __type.GetMethod("CreateDocumentStamp", new global::System.Type[]{typeof(global::Sungero.Docflow.IOfficialDocument)});
        return (global::System.String)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__methodInfo, __instance, new object[]{document});
      }
      else
      {
        return ((global::Akelon.StampModule.Server.ModuleFunctions)GetFinalFunctionsContainer(global::Sungero.Metadata.ModuleProjectType.Server, __finalModuleMetadatda)).CreateDocumentStamp(document);
      }
    }
    /// <redirect project="Akelon.StampModule.Server" type="Akelon.StampModule.Server.ModuleFunctions" />
    internal static global::Akelon.StampModule.IStampSetting GetStampSetting(global::Sungero.Docflow.IDocumentType docType)
    {
      var __moduleId = new global::System.Guid("afa06e1e-0cb3-4141-a383-ee483bb5bef6");
      var __finalModuleMetadatda = global::Sungero.Metadata.MetadataExtension.GetFinal(global::Sungero.Metadata.Services.MetadataSearcher.FindModuleMetadata(__moduleId) ?? global::Sungero.Metadata.Services.MetadataSearcher.FindLayerModuleMetadata(__moduleId));
      var __funcNamespace = "Server" == "ClientBase" ? __finalModuleMetadatda.ClientNamespace : __finalModuleMetadatda.ServerNamespace;
      var __typeName = __funcNamespace + ".ModuleFunctions, Akelon.StampModule.Server";
      var __type = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve(__typeName);
      if (__type != null)
      {
        var __instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(__type);
        var __methodInfo = __type.GetMethod("GetStampSetting", new global::System.Type[]{typeof(global::Sungero.Docflow.IDocumentType)});
        return (global::Akelon.StampModule.IStampSetting)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__methodInfo, __instance, new object[]{docType});
      }
      else
      {
        return ((global::Akelon.StampModule.Server.ModuleFunctions)GetFinalFunctionsContainer(global::Sungero.Metadata.ModuleProjectType.Server, __finalModuleMetadatda)).GetStampSetting(docType);
      }
    }
    /// <redirect project="Akelon.StampModule.Server" type="Akelon.StampModule.Server.ModuleFunctions" />
    internal static global::Sungero.Docflow.IOfficialDocument ConvertToPDF(global::Sungero.Docflow.IOfficialDocument document)
    {
      var __moduleId = new global::System.Guid("afa06e1e-0cb3-4141-a383-ee483bb5bef6");
      var __finalModuleMetadatda = global::Sungero.Metadata.MetadataExtension.GetFinal(global::Sungero.Metadata.Services.MetadataSearcher.FindModuleMetadata(__moduleId) ?? global::Sungero.Metadata.Services.MetadataSearcher.FindLayerModuleMetadata(__moduleId));
      var __funcNamespace = "Server" == "ClientBase" ? __finalModuleMetadatda.ClientNamespace : __finalModuleMetadatda.ServerNamespace;
      var __typeName = __funcNamespace + ".ModuleFunctions, Akelon.StampModule.Server";
      var __type = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve(__typeName);
      if (__type != null)
      {
        var __instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(__type);
        var __methodInfo = __type.GetMethod("ConvertToPDF", new global::System.Type[]{typeof(global::Sungero.Docflow.IOfficialDocument)});
        return (global::Sungero.Docflow.IOfficialDocument)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__methodInfo, __instance, new object[]{document});
      }
      else
      {
        return ((global::Akelon.StampModule.Server.ModuleFunctions)GetFinalFunctionsContainer(global::Sungero.Metadata.ModuleProjectType.Server, __finalModuleMetadatda)).ConvertToPDF(document);
      }
    }
    /// <redirect project="Akelon.StampModule.Server" type="Akelon.StampModule.Server.ModuleFunctions" />
    internal static global::System.Collections.Generic.List<global::System.Int32> GetSizePicture(System.Byte[] imageFile)
    {
      var __moduleId = new global::System.Guid("afa06e1e-0cb3-4141-a383-ee483bb5bef6");
      var __finalModuleMetadatda = global::Sungero.Metadata.MetadataExtension.GetFinal(global::Sungero.Metadata.Services.MetadataSearcher.FindModuleMetadata(__moduleId) ?? global::Sungero.Metadata.Services.MetadataSearcher.FindLayerModuleMetadata(__moduleId));
      var __funcNamespace = "Server" == "ClientBase" ? __finalModuleMetadatda.ClientNamespace : __finalModuleMetadatda.ServerNamespace;
      var __typeName = __funcNamespace + ".ModuleFunctions, Akelon.StampModule.Server";
      var __type = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve(__typeName);
      if (__type != null)
      {
        var __instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(__type);
        var __methodInfo = __type.GetMethod("GetSizePicture", new global::System.Type[]{typeof(System.Byte[])});
        return (global::System.Collections.Generic.List<global::System.Int32>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__methodInfo, __instance, new object[]{imageFile});
      }
      else
      {
        return ((global::Akelon.StampModule.Server.ModuleFunctions)GetFinalFunctionsContainer(global::Sungero.Metadata.ModuleProjectType.Server, __finalModuleMetadatda)).GetSizePicture(imageFile);
      }
    }

    private static object GetFunctionsContainer()
    {
      return new global::Akelon.StampModule.Server.ModuleFunctions();
    }

    private static object GetFinalFunctionsContainer(global::Sungero.Metadata.ModuleProjectType projectType, global::Sungero.Metadata.ModuleMetadata finalModuleMetadatda)
    {
      var assemblyName = finalModuleMetadatda.GetAssemblyName(projectType);
      var moduleFunctionsType = global::System.Type.GetType(global::System.String.Format("{0}.{1}, {2}", finalModuleMetadatda.FunctionNamespace, "Module", assemblyName));
      var methodInfo = moduleFunctionsType.GetMethod("GetFunctionsContainer", global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Static);
      return global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, null, null);
    }
  }
}

// ==================================================================
// ModuleInitializationInstantiation.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akelon.StampModule.ModuleInitialization
{
  internal static partial class Module
  {

    private static object GetFunctionsContainer()
    {
      return new global::Akelon.StampModule.Server.ModuleInitializer();
    }

    private static object GetFinalFunctionsContainer(global::Sungero.Metadata.ModuleProjectType projectType, global::Sungero.Metadata.ModuleMetadata finalModuleMetadatda)
    {
      var assemblyName = finalModuleMetadatda.GetAssemblyName(projectType);
      var moduleFunctionsType = global::System.Type.GetType(global::System.String.Format("{0}.{1}, {2}", finalModuleMetadatda.ModuleInitializationNamespace, "Module", assemblyName));
      var methodInfo = moduleFunctionsType.GetMethod("GetFunctionsContainer", global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Static);
      return global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, null, null);
    }

  }
}


// ==================================================================
// ModuleEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akelon.StampModule.Server
{
}

// ==================================================================
// ModuleServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akelon.StampModule.Server
{
  public partial class ModuleServerPublicFunctions : global::Akelon.StampModule.Server.IModuleServerPublicFunctions
  {
    public global::System.Collections.Generic.List<global::System.Int32> GetSizePicture(System.Byte[] imageFile)
    {
      return global::Akelon.StampModule.Functions.Module.GetSizePicture(imageFile);
    }
  }
}

namespace Akelon.StampModule.Server
{
  public partial class ModuleServerPublicFunctions : global::Akelon.StampModule.Server.IModuleServerPublicFunctions
  {

  }
}

// ==================================================================
// ModuleServerInitializationFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akelon.StampModule.Server
{
  public partial class ModuleServerInitializationFunctions : global::Akelon.StampModule.Server.IModuleServerInitializationFunctions
  {
  }
}


// ==================================================================
// ModuleWidgetHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akelon.StampModule.Server
{
}

// ==================================================================
// ModuleBlockHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akelon.StampModule.Server.StampModuleBlocks
{
}

namespace Sungero.Workflow
{
}

// ==================================================================
// ModuleQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akelon.StampModule.Queries
{
  public class Module
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Akelon.StampModule.Server.ModuleQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}

// ==================================================================
// ModuleInitializer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akelon.StampModule.Server
{
  public partial class ModuleInitializer : global::Sungero.Domain.AppliedModuleInitializer
  {
  }
}

