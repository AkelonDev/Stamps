
// ==================================================================
// StampSetting.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akelon.StampModule.Server
{
    public class StampSettingFilter<T> :
      global::Sungero.Domain.EntityFilterBase<T>
      where T : class, global::Akelon.StampModule.IStampSetting
    {
      protected new global::Akelon.StampModule.IStampSettingFilterState Filter { get; private set; }

      private global::Akelon.StampModule.IStampSettingFilterState filter
      {
        get
        {
          return this.Filter;
        }
      }

      protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
      {
        return base.ApplyAppliedFilter(query);
      }

      public StampSettingFilter(global::Akelon.StampModule.IStampSettingFilterState filter)
      : base()
      {
        this.Filter = filter;
      }

      protected StampSettingFilter()
      {
      }
    }
      public class StampSettingUiFilter<T> :
        global::Sungero.Domain.EntityUiFilterBase<T>
        where T : class, global::Akelon.StampModule.IStampSetting
      {
        protected override global::System.Linq.IQueryable<T> ApplyAppliedFilter(global::System.Linq.IQueryable<T> query)
        {
          return base.ApplyAppliedFilter(query);
        }
      }

    public class StampSettingSearchDialogModel : global::Sungero.CoreEntities.Server.DatabookEntrySearchDialogModel
        {
                  public override global::System.Int32? Id { get; protected set; }



                  public virtual global::System.String Name { get; protected set; }


                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Docflow.IDocumentType> DocumentType { get; protected set; }
                  public virtual global::System.Collections.Generic.IEnumerable<Sungero.Core.Enumeration> StampKind { get; protected set; }


        }




  public class StampSettingFilterForDocumentType<TQueryEntity, TSourceEntity>
    : global::Sungero.Domain.EntityPropertyFilterBase<TQueryEntity, TSourceEntity>
    where TQueryEntity : class, global::Sungero.Docflow.IDocumentType
    where TSourceEntity : class, global::Akelon.StampModule.IStampSetting
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, TSourceEntity sourceEntity)
    {
      var args = new global::Sungero.Domain.PropertyFilteringEventArgs(sourceEntity);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Akelon.StampModule.StampSettingDocumentTypePropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType, new object[] { sourceEntity });
        var methodInfo = genericType.GetMethod("DocumentTypeFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Akelon.StampModule.StampSettingDocumentTypePropertyFilteringServerHandler<TQueryEntity>(sourceEntity).DocumentTypeFiltering(query, args);
      }
      if (args.DisableUiFiltering)
        global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public StampSettingFilterForDocumentType(string propertyName)
      : base(propertyName)
    {
    }
  }

  public class StampSettingSearchFilterForDocumentType<TQueryEntity>
    : global::Sungero.Domain.SearchDialogPropertyFilter<TQueryEntity>
    where TQueryEntity : class, global::Sungero.Docflow.IDocumentType
  {
    protected override global::System.Linq.IQueryable<TQueryEntity> ApplyAppliedFilter(global::System.Linq.IQueryable<TQueryEntity> query, System.Guid entityType)
    {
      var args = new global::Sungero.Domain.PropertySearchDialogFilteringEventArgs(entityType);
      global::System.Linq.IQueryable<TQueryEntity> result;
      var filterType = global::Sungero.Metadata.Services.AppliedTypesManager.Instance.Resolve("Akelon.StampModule.StampSettingDocumentTypeSearchPropertyFilteringServerHandler`1");
      if (filterType != null)
      {
        var genericType = filterType.MakeGenericType(typeof(TQueryEntity));
        var instance = global::Sungero.Metadata.Services.AppliedTypesManager.CreateTypeInstance(genericType);
        var methodInfo = genericType.GetMethod("DocumentTypeSearchDialogFiltering");
        result = (global::System.Linq.IQueryable<TQueryEntity>)global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(methodInfo, instance, new object[] { query, args });
      }
      else
      {
        result = new global::Akelon.StampModule.StampSettingDocumentTypeSearchPropertyFilteringServerHandler<TQueryEntity>().DocumentTypeSearchDialogFiltering(query, args);
      }
      if (args.DisableUiFiltering)
          global::Sungero.Domain.UiFilteringEventManagementScope.DisableEvent<TQueryEntity>();
      return result;
    }

    public StampSettingSearchFilterForDocumentType(string propertyName)
      : base(propertyName)
    {
    }
  }



  [global::Sungero.Domain.Filter(typeof(global::Akelon.StampModule.Server.StampSettingFilter<global::Akelon.StampModule.IStampSetting>))]
  [global::Sungero.Domain.UiFilter(typeof(global::Akelon.StampModule.Server.StampSettingUiFilter<global::Akelon.StampModule.IStampSetting>))]
  [global::Sungero.Domain.PropertyFilter(typeof(global::Akelon.StampModule.Server.StampSettingFilterForDocumentType<global::Sungero.Docflow.IDocumentType, global::Akelon.StampModule.IStampSetting>), "DocumentType")]
  [global::Sungero.Domain.SearchPropertyFilter(typeof(global::Akelon.StampModule.Server.StampSettingSearchFilterForDocumentType<global::Sungero.Docflow.IDocumentType>), "DocumentType")]


  public class StampSetting :
    global::Sungero.CoreEntities.Server.DatabookEntry, global::Akelon.StampModule.IStampSetting
  {
    public static new readonly global::System.Guid ClassTypeGuid = global::System.Guid.Parse("f934513f-69b5-42cc-8fda-e3774740a380");

    public override global::System.Guid TypeGuid
    {
      get { return global::Akelon.StampModule.Server.StampSetting.ClassTypeGuid; }
    }

    public override string TypeName
    {
      get { return "Akelon.StampModule.IStampSetting, Sungero.Domain.Interfaces"; }
    }

    public override string DisplayValue
    {
      get { return this.Name; }
      set { this.Name = value; }
    }

    public new virtual global::Akelon.StampModule.IStampSettingState State
    {
      get { return (global::Akelon.StampModule.IStampSettingState)base.State; }
    }

    protected override global::Sungero.Domain.Shared.IEntityState CreateState()
    {
      return new global::Akelon.StampModule.Shared.StampSettingState(this);
    }

    public new virtual global::Akelon.StampModule.IStampSettingInfo Info
    {
      get { return (global::Akelon.StampModule.IStampSettingInfo)base.Info; }
    }

    public new virtual global::Akelon.StampModule.IStampSettingAccessRights AccessRights
    {
      get { return (global::Akelon.StampModule.IStampSettingAccessRights)base.AccessRights; }
    }

    protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
    {
      return new global::Akelon.StampModule.Server.StampSettingAccessRights(this);
    }

    protected override global::Sungero.Domain.EntityFunctions CreateServerFunctions()
    {
      return new global::Akelon.StampModule.Server.StampSettingFunctions(this);
    }

    protected override global::Sungero.Domain.Shared.EntityFunctions CreateSharedFunctions()
    {
      return new global::Akelon.StampModule.Shared.StampSettingFunctions(this);
    }

    protected override object CreateHandlers() {
      return new global::Akelon.StampModule.StampSettingServerHandlers(this);
    }

    protected override object CreateSharedHandlers() {
      return new global::Akelon.StampModule.StampSettingSharedHandlers(this);
    }

    private global::System.String _Name;
    public virtual global::System.String Name
    {
      get
      {
        return this._Name;
      }

      set
      {
        this.SetPropertyValue("Name", this._Name, value, (propertyValue) => { this._Name = propertyValue; }, this.NameChangedHandler);
      }
    }
    private global::System.Int32? _SizeHeight;
    public virtual global::System.Int32? SizeHeight
    {
      get
      {
        return this._SizeHeight;
      }

      set
      {
        this.SetPropertyValue("SizeHeight", this._SizeHeight, value, (propertyValue) => { this._SizeHeight = propertyValue; }, this.SizeHeightChangedHandler);
      }
    }
    private global::System.Int32? _SizeWidth;
    public virtual global::System.Int32? SizeWidth
    {
      get
      {
        return this._SizeWidth;
      }

      set
      {
        this.SetPropertyValue("SizeWidth", this._SizeWidth, value, (propertyValue) => { this._SizeWidth = propertyValue; }, this.SizeWidthChangedHandler);
      }
    }




    private global::System.Byte[] _StampImage;
    [global::Sungero.Domain.Shared.DoNotSavePreviousValue]
    public virtual global::System.Byte[] StampImage
    {
      get
      {
        return this._StampImage;
      }

      set
      {
        this.SetPropertyValue("StampImage", this._StampImage, value, (propertyValue) => { this._StampImage = propertyValue; }, this.StampImageChangedHandler);
      }
    }



    private static global::Sungero.Domain.Shared.EnumerationItems _StampKindItems = new global::Sungero.Domain.Shared.EnumerationItems(
      null,
      typeof(global::Akelon.StampModule.StampSetting.StampKind),
      typeof(global::Akelon.StampModule.Server.StampSetting),
      "StampKind");

    public static global::Sungero.Domain.Shared.EnumerationItems StampKindItems
    {
      get { return global::Akelon.StampModule.Server.StampSetting._StampKindItems; }
    }

    public virtual global::Sungero.Domain.Shared.EnumerationItems StampKindAllowedItems
    {
      get { return global::Akelon.StampModule.Server.StampSetting.StampKindItems; }
    }

    private global::Sungero.Core.Enumeration? _StampKind;

    public virtual global::Sungero.Core.Enumeration? StampKind
    {
      get { return this._StampKind; }
      set { this.SetEnumPropertyValue("StampKind", this._StampKind, value, (propertyValue) => { this._StampKind = propertyValue; }, this.StampKindChangedHandler, this.StampKindAllowedItems); }
    }
    private static global::Sungero.Domain.Shared.EnumerationItems _DocumentPositionItems = new global::Sungero.Domain.Shared.EnumerationItems(
      null,
      typeof(global::Akelon.StampModule.StampSetting.DocumentPosition),
      typeof(global::Akelon.StampModule.Server.StampSetting),
      "DocumentPosition");

    public static global::Sungero.Domain.Shared.EnumerationItems DocumentPositionItems
    {
      get { return global::Akelon.StampModule.Server.StampSetting._DocumentPositionItems; }
    }

    public virtual global::Sungero.Domain.Shared.EnumerationItems DocumentPositionAllowedItems
    {
      get { return global::Akelon.StampModule.Server.StampSetting.DocumentPositionItems; }
    }

    private global::Sungero.Core.Enumeration? _DocumentPosition;

    public virtual global::Sungero.Core.Enumeration? DocumentPosition
    {
      get { return this._DocumentPosition; }
      set { this.SetEnumPropertyValue("DocumentPosition", this._DocumentPosition, value, (propertyValue) => { this._DocumentPosition = propertyValue; }, this.DocumentPositionChangedHandler, this.DocumentPositionAllowedItems); }
    }
    private static global::Sungero.Domain.Shared.EnumerationItems _PagePositionItems = new global::Sungero.Domain.Shared.EnumerationItems(
      null,
      typeof(global::Akelon.StampModule.StampSetting.PagePosition),
      typeof(global::Akelon.StampModule.Server.StampSetting),
      "PagePosition");

    public static global::Sungero.Domain.Shared.EnumerationItems PagePositionItems
    {
      get { return global::Akelon.StampModule.Server.StampSetting._PagePositionItems; }
    }

    public virtual global::Sungero.Domain.Shared.EnumerationItems PagePositionAllowedItems
    {
      get { return global::Akelon.StampModule.Server.StampSetting.PagePositionItems; }
    }

    private global::Sungero.Core.Enumeration? _PagePosition;

    public virtual global::Sungero.Core.Enumeration? PagePosition
    {
      get { return this._PagePosition; }
      set { this.SetEnumPropertyValue("PagePosition", this._PagePosition, value, (propertyValue) => { this._PagePosition = propertyValue; }, this.PagePositionChangedHandler, this.PagePositionAllowedItems); }
    }


    private global::Sungero.Docflow.IDocumentType _DocumentType;
    public virtual global::Sungero.Docflow.IDocumentType DocumentType
    {
      get
      {
        return this._DocumentType;
      }

      set
      {
        this.SetPropertyValue("DocumentType", this._DocumentType, value, (propertyValue) => { this._DocumentType = propertyValue; }, this.DocumentTypeChangedHandler);
      }
    }




    protected override global::Sungero.Domain.Shared.EntityCreatingFromServerHandler CreateCreatingFromServerHandler(
      global::Sungero.Domain.Shared.IEntity entitySource)
    {
      var instance = Sungero.Metadata.Services.AppliedTypesManager.CreateInstance("Akelon.StampModule.StampSettingCreatingFromServerHandler", new object[] { (global::Akelon.StampModule.IStampSetting)entitySource, this.Info });
      if (instance != null)
        return (global::Sungero.Domain.Shared.EntityCreatingFromServerHandler)instance;

      return new global::Akelon.StampModule.StampSettingCreatingFromServerHandler((global::Akelon.StampModule.IStampSetting)entitySource, this.Info);
    }

    #region Framework events

    protected void NameChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.StringPropertyChangedEventArgs(this.State.Properties.Name, this.Name, this);
     ((global::Akelon.StampModule.IStampSettingSharedHandlers)this.SharedHandlers).NameChanged(args);
    }

    protected void DocumentTypeChangedHandler()
    {
      var args = new global::Akelon.StampModule.Shared.StampSettingDocumentTypeChangedEventArgs(this.State.Properties.DocumentType, this.DocumentType, this);
     ((global::Akelon.StampModule.IStampSettingSharedHandlers)this.SharedHandlers).DocumentTypeChanged(args);
    }

    protected void StampKindChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.StampKind, this.StampKind, this);
     ((global::Akelon.StampModule.IStampSettingSharedHandlers)this.SharedHandlers).StampKindChanged(args);
    }

    protected void DocumentPositionChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.DocumentPosition, this.DocumentPosition, this);
     ((global::Akelon.StampModule.IStampSettingSharedHandlers)this.SharedHandlers).DocumentPositionChanged(args);
    }

    protected void PagePositionChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.EnumerationPropertyChangedEventArgs(this.State.Properties.PagePosition, this.PagePosition, this);
     ((global::Akelon.StampModule.IStampSettingSharedHandlers)this.SharedHandlers).PagePositionChanged(args);
    }

    protected void SizeHeightChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.IntegerPropertyChangedEventArgs(this.State.Properties.SizeHeight, this.SizeHeight, this);
     ((global::Akelon.StampModule.IStampSettingSharedHandlers)this.SharedHandlers).SizeHeightChanged(args);
    }

    protected void SizeWidthChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.IntegerPropertyChangedEventArgs(this.State.Properties.SizeWidth, this.SizeWidth, this);
     ((global::Akelon.StampModule.IStampSettingSharedHandlers)this.SharedHandlers).SizeWidthChanged(args);
    }

    protected void StampImageChangedHandler()
    {
      var args = new global::Sungero.Domain.Shared.ImagePropertyChangedEventArgs(this.State.Properties.StampImage, this.StampImage, this);
     ((global::Akelon.StampModule.IStampSettingSharedHandlers)this.SharedHandlers).StampImageChanged(args);
    }



    #endregion


    public StampSetting()
    {
    }

  }
}

// ==================================================================
// StampSettingHandlers.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akelon.StampModule
{
  public partial class StampSettingDocumentTypePropertyFilteringServerHandler<T>
    : global::Sungero.Domain.EntityPropertyFilteringServerHandler
    where T : class, global::Sungero.Docflow.IDocumentType
  {
    private global::Akelon.StampModule.IStampSetting _obj
    {
      get { return (global::Akelon.StampModule.IStampSetting)this.Entity; }
    }

    public virtual global::System.Linq.IQueryable<T> DocumentTypeFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertyFilteringEventArgs e)
    {
      return query;
    }

    public StampSettingDocumentTypePropertyFilteringServerHandler(global::Akelon.StampModule.IStampSetting entity)
      : base(entity)
    {
    }
  }

  public partial class StampSettingDocumentTypeSearchPropertyFilteringServerHandler<T>
    : global::Sungero.Domain.SearchPropertyFilteringServerHandler
    where T : class, global::Sungero.Docflow.IDocumentType
  {

    public virtual global::System.Linq.IQueryable<T> DocumentTypeSearchDialogFiltering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.PropertySearchDialogFilteringEventArgs e)
    {
      return query;
    }

    public StampSettingDocumentTypeSearchPropertyFilteringServerHandler()
      : base()
    {
    }
  }



  public partial class StampSettingFilteringServerHandler<T>
    : global::Sungero.Domain.EntityFilteringServerHandler<T>  
    where T : class, global::Akelon.StampModule.IStampSetting
  {
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    protected new global::Akelon.StampModule.IStampSettingFilterState Filter { get; private set; }

    private global::Akelon.StampModule.IStampSettingFilterState _filter
    {
      get
      {
        return this.Filter;
      }
    }

    public StampSettingFilteringServerHandler(global::Akelon.StampModule.IStampSettingFilterState filter)
    : base()
    {
      this.Filter = filter;
    }

    protected StampSettingFilteringServerHandler()
    {
    }

    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.FilteringEventArgs e)
    {
      return query;
    }


  }

  public partial class StampSettingUiFilteringServerHandler<T>
    : global::Sungero.Domain.EntityUiFilteringServerHandler<T>
    where T : class, global::Akelon.StampModule.IStampSetting
  {
    public override global::System.Linq.IQueryable<T> Filtering(global::System.Linq.IQueryable<T> query, global::Sungero.Domain.UiFilteringEventArgs e)
    {
      query = base.Filtering(query, e);
            return query;
    }
  }

  public partial class StampSettingSearchDialogServerHandler : global::Sungero.CoreEntities.DatabookEntrySearchDialogServerHandler
   {
     private global::Akelon.StampModule.Server.StampSettingSearchDialogModel _dialog
     {
       get
       {
         return (global::Akelon.StampModule.Server.StampSettingSearchDialogModel)this.Dialog;
       }
     }

     public StampSettingSearchDialogServerHandler(global::Akelon.StampModule.Server.StampSettingSearchDialogModel dialog)
       : base(dialog)
     {
     }
   }

  public partial class StampSettingServerHandlers : global::Sungero.CoreEntities.DatabookEntryServerHandlers
  {
    private global::Akelon.StampModule.IStampSetting _obj
    {
      get { return (global::Akelon.StampModule.IStampSetting)this.Entity; }
    }

    public StampSettingServerHandlers(global::Akelon.StampModule.IStampSetting entity)
      : base(entity)
    {
    }
  }

  public partial class StampSettingCreatingFromServerHandler : global::Sungero.CoreEntities.DatabookEntryCreatingFromServerHandler
  {
    private global::Akelon.StampModule.IStampSetting _source
    {
      get { return (global::Akelon.StampModule.IStampSetting)this.Source; }
    }

    private global::Akelon.StampModule.IStampSettingInfo _info
    {
      get { return (global::Akelon.StampModule.IStampSettingInfo)this._Info; }
    }

    public StampSettingCreatingFromServerHandler(global::Akelon.StampModule.IStampSetting source, global::Akelon.StampModule.IStampSettingInfo info)
      : base(source, info)
    {
    }
  }

}

// ==================================================================
// StampSettingEventArgs.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akelon.StampModule.Server
{
}

// ==================================================================
// StampSettingAccessRights.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akelon.StampModule.Server
{
  public class StampSettingAccessRights : 
    Sungero.CoreEntities.Server.DatabookEntryAccessRights, Akelon.StampModule.IStampSettingAccessRights
  {

    public StampSettingAccessRights(global::Sungero.Domain.Shared.IEntity entity) : base(entity)
    {
    }
  }

  public class StampSettingTypeAccessRights : 
    Sungero.CoreEntities.Server.DatabookEntryTypeAccessRights, Akelon.StampModule.IStampSettingAccessRights
  {

    public StampSettingTypeAccessRights(global::System.Type entityType) : base(entityType)
    {
    }
  }
}

// ==================================================================
// StampSettingRepositoryImplementer.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akelon.StampModule.Server
{
    public class StampSettingRepositoryImplementer<T> : 
      global::Sungero.Domain.RepositoryImplementer<T>,
      global::Akelon.StampModule.IStampSettingRepositoryImplementer<T>
      where T : global::Akelon.StampModule.IStampSetting 
    {
       public new global::Akelon.StampModule.IStampSettingAccessRights AccessRights
       {
          get { return (global::Akelon.StampModule.IStampSettingAccessRights)base.AccessRights; }
       }

       public new global::Akelon.StampModule.IStampSettingInfo Info
       {
          get { return (global::Akelon.StampModule.IStampSettingInfo)base.Info; }
       }

       protected override global::Sungero.Domain.Shared.IEntityAccessRights CreateAccessRights()
       {
         return new global::Akelon.StampModule.Server.StampSettingTypeAccessRights(typeof(T));
       }
    }
}

// ==================================================================
// StampSettingPanelNavigationFilters.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akelon.StampModule.Server
{
}

// ==================================================================
// StampSettingServerFunctions.g.cs
// ==================================================================

namespace Akelon.StampModule.Server
{
  public partial class StampSettingFunctions : global::Sungero.CoreEntities.Server.DatabookEntryFunctions
  {
    private global::Akelon.StampModule.IStampSetting _obj
    {
      get { return (global::Akelon.StampModule.IStampSetting)this.Entity; }
    }

    public StampSettingFunctions(global::Akelon.StampModule.IStampSetting entity) : base(entity) { }
  }
}

// ==================================================================
// StampSettingFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akelon.StampModule.Functions
{
  internal static class StampSetting
  {
    /// <redirect project="Akelon.StampModule.Shared" type="Akelon.StampModule.Shared.StampSettingFunctions" />
    internal static  void SetVisibleProperties(global::Akelon.StampModule.IStampSetting stampSetting)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)stampSetting).FunctionsContainer.SharedFunctions;
      var __funcMethod = __functions.GetType().GetMethod("SetVisibleProperties", new System.Type[] {  });
    global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] {  });
    }
    /// <redirect project="Akelon.StampModule.Shared" type="Akelon.StampModule.Shared.StampSettingFunctions" />
    internal static  void SetRequiredProperties(global::Akelon.StampModule.IStampSetting stampSetting)
    {
      var __functions = ((global::Sungero.Domain.Shared.IEntityFunctions)stampSetting).FunctionsContainer.SharedFunctions;
      var __funcMethod = __functions.GetType().GetMethod("SetRequiredProperties", new System.Type[] {  });
    global::CommonLibrary.ReflectionExtensions.ReflectionInvoke(__funcMethod, __functions, new object[] {  });
    }

  }
}

// ==================================================================
// StampSettingServerPublicFunctions.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akelon.StampModule.Server
{
  public class StampSettingServerPublicFunctions : global::Akelon.StampModule.Server.IStampSettingServerPublicFunctions
  {
  }
}

// ==================================================================
// StampSettingQueries.g.cs
// ==================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akelon.StampModule.Queries
{
  public class StampSetting
  {
    private static global::Sungero.Domain.SqlQueryResolver resolver = new global::Sungero.Domain.SqlQueryResolver("Akelon.StampModule.Server.StampSetting.StampSettingQueries.xml", System.Reflection.Assembly.GetExecutingAssembly());
  }
}
